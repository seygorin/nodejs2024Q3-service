openapi: 3.0.0
paths:
  /auth/signup:
    post:
      operationId: AuthController_signUp
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpDto"
      responses:
        "201":
          description: ""
      tags: &a1
        - Auth
  /auth/login:
    post:
      operationId: AuthController_login
      summary: Login user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
            examples:
              example1:
                summary: Login credentials example
                value:
                  login: testuser
                  password: Test123!
      responses:
        "200":
          description: Successfully logged in
          content:
            application/json:
              example:
                accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.example-access-token
                refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.example-refresh-token
        "400":
          description: Bad Request - validation error
        "403":
          description: Forbidden - invalid credentials
      tags: *a1
  /auth/refresh:
    post:
      operationId: AuthController_refresh
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenDto"
      responses:
        "200":
          description: ""
      tags: *a1
  /user:
    get:
      operationId: UsersController_findAll
      parameters: []
      responses:
        "200":
          description: ""
      tags: &a2
        - Users
      security: &a3
        - JWT-auth: []
    post:
      operationId: UsersController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: ""
      tags: *a2
      security: *a3
  /user/{id}:
    get:
      operationId: UsersController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a2
      security: *a3
    put:
      operationId: UsersController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordDto"
      responses:
        "200":
          description: ""
      tags: *a2
      security: *a3
    delete:
      operationId: UsersController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: ""
      tags: *a2
      security: *a3
  /artist:
    get:
      operationId: ArtistsController_findAll
      parameters: []
      responses:
        "200":
          description: ""
    post:
      operationId: ArtistsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateArtistDto"
      responses:
        "201":
          description: ""
  /artist/{id}:
    get:
      operationId: ArtistsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
    put:
      operationId: ArtistsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateArtistDto"
      responses:
        "200":
          description: ""
    delete:
      operationId: ArtistsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: ""
  /track:
    get:
      operationId: TracksController_findAll
      parameters: []
      responses:
        "200":
          description: ""
    post:
      operationId: TracksController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrackDto"
      responses:
        "201":
          description: ""
  /track/{id}:
    get:
      operationId: TracksController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
    put:
      operationId: TracksController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrackDto"
      responses:
        "200":
          description: ""
    delete:
      operationId: TracksController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: ""
  /album:
    get:
      operationId: AlbumsController_findAll
      parameters: []
      responses:
        "200":
          description: ""
    post:
      operationId: AlbumsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAlbumDto"
      responses:
        "201":
          description: ""
  /album/{id}:
    get:
      operationId: AlbumsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
    put:
      operationId: AlbumsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAlbumDto"
      responses:
        "200":
          description: ""
    delete:
      operationId: AlbumsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: ""
  /favs:
    get:
      operationId: FavoritesController_findAll
      parameters: []
      responses:
        "200":
          description: ""
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: ""
    delete:
      operationId: FavoritesController_removeTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: ""
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: ""
    delete:
      operationId: FavoritesController_removeAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: ""
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: ""
    delete:
      operationId: FavoritesController_removeArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: ""
info:
  title: Home Library Service
  description: "

    \      ## Authentication

    \      1. Use POST /auth/login to get tokens

    \      2. Click 'Authorize' button at the top

    \      3. Enter your access token in format: Bearer <token>

    \      4. Now you can access protected endpoints

    \    "
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    JWT-auth:
      scheme: bearer
      bearerFormat: JWT
      type: http
      name: JWT
      description: Enter JWT token
      in: header
  schemas:
    SignUpDto:
      type: object
      properties:
        login:
          type: string
          example: testuser
          description: User login
        password:
          type: string
          example: Test123!
          description: User password
      required:
        - login
        - password
    LoginDto:
      type: object
      properties: {}
    RefreshTokenDto:
      type: object
      properties:
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          description: Refresh token
      required:
        - refreshToken
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: john_doe
          description: User login
        password:
          type: string
          example: password123
          description: User password
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties: {}
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: Michael Jackson
          description: The name of the artist
        grammy:
          type: boolean
          example: true
          description: Whether the artist has a Grammy award
      required:
        - name
        - grammy
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: Billie Jean
          description: The name of the track
        duration:
          type: number
          example: 180
          description: The duration of the track in seconds
        artistId:
          type: string
          example: e37b6c61-2ef0-41e0-a421-f8f3311f6977
          description: The ID of the artist
        albumId:
          type: string
          example: e37b6c11-9ef0-41e0-a421-f8f3311f6977
          description: The ID of the album
      required:
        - name
        - duration
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Thriller
          description: The name of the album
        year:
          type: number
          example: 2023
          description: The release year of the album
        artistId:
          type: string
          example: e37b6c11-9ef0-41e0-a221-f8f3311f6977
          description: The ID of the artist
      required:
        - name
        - year
